For background and overview, see README.markdown.

1.  Create a partition that both Windows and Linux have access to, if you don't
    have one already. This should be one of a type supported by grub 1.99, which
    includes all major filesystem types. We will assume that it is mounted under
    Linux as /boot/control.

2.  The note at the top of /boot/grub2/grub.cfg warns us not to edit it manually,
    since it is auto-generated by /sbin/grub2-mkconfig from some settings in
    /etc/default/grub and whichever files it finds in /etc/grub.d/.
    Copy ./etc-grub.d/40_custom from this repository to /etc/grub.d/.
    This is the menu entry that causes GRUB to continue with
    /boot/control/grub.cfg.

3.  At this step, you need to edit the /etc/grub.d/40_custom that you
    just copied in, and change the line 
      set root='(hd0,7)'
    to match your system. See
      http://www.gnu.org/software/grub/manual/grub.html#Device-syntax
    for details.

4.  Edit /etc/default/grub, and change the value of GRUB_DEFAULT to
    "BOOTCONTROL REDIRECT" (with the quotes). Also, change the value of
    GRUB_TIMEOUT to 0. Together, this means immediately proceed with the menu
    entry labelled "BOOTCONTROL REDIRECT". (If you're a little cautious, set the
    timeout to 1 or 2 seconds at first.)

5.  Make a backup of /boot/grub2/grub.cfg.

6.  As root, run grub2-mkconfig -o /boot/grub2/grub.cfg.

7.  Inspect the diff between your backup and the freshly generated
    /boot/grub2/grub.cfg. The only difference should be the timeout, the default,
    and the new menu entry. If anything is amiss at this point, restore grub.cfg
    from your backup and make the needed modifications yourself, it should be
    obvious.

8.  At this point, we have a new GRUB config which does the required redirection,
    and could now proceed with creating /boot/control/grub.cfg as desired.
    However, we have to consider what happens on a kernel update. After a new
    kernel has been installed, the rpm package manager will run
    /sbin/new-kernel-pkg (a few times, with different parameters; see
    http://pkgs.fedoraproject.org/gitweb/?p=kernel.git;a=blob;f=kernel.spec;hb=HEAD
    for the latest rpm spec file). new-kernel-pkg in turn will first invoke
    grubby, which does the actual work of adding a menu entry for the new kernel
    to grub.cfg. (It does this by directly modifying grub.cfg, as opposed to
    running grub2-mkconfig.) Then -- luckily for us -- it runs any executable it
    finds in /etc/kernel/postinst.d/. This gives us the opportunity to pick up
    the menu entry for the latest kernel, and save it to /boot/control/. Since
    grubby also sets the default menu choice to the latest kernel, we have to
    restore that too.
    Copy ./etc-kernel-postinst.d/bootcontrol-update.pl from this repository into
    /etc/kernel/postinst.d/.

9.  As root, run /etc/kernel/postinst.d/bootcontrol-update.pl. It has created
    linux.cfg, windows.cfg, menu.cfg and grub.cfg in /boot/control/.
    linux.cfg is the latest Linux kernel, windows.cfg is Windows, menu.cfg
    consists of both of these options, and grub.cfg is a copy of menu.cfg. It is
    worth inspecting all files at this point to ensure nothing went wrong.

10. Now, if you want to reboot to Windows from Linux, all you need to do is
      # cp /boot/control/windows.cfg /boot/control/grub.cfg
      # reboot
    (In the step 12, we will add a nice graphical reboot option that you can
    use if you're running GNOME 3.)
    Conversely, if you want to reboot Linux from Windows, you just need to copy
    linux.cfg over grub.cfg. For that purpose, copy
    ./boot-control/windows_to_linux.js from this repository to /boot/control/,
    adjust the drive letter if required, and make a shortcut to it on your
    Windows desktop. Similarly, there is windows_to_windows.js to reboot Windows
    directly from Windows.

11. We probably want to ensure that /boot/control/grub.cfg is restored from
    /boot/control/menu.cfg after each boot, so that the menu remains the default
    boot choice unless chosen otherwise. For Linux, we use the systemd
    mechanism: copy ./etc-systemd-system/bootcontrol-restore.service from this
    repository to /etc/systemd/system/. Run
      systemctl enable bootcontrol-restore.service
    to enable it. For Windows, copy ./boot-control/windows_restore.js to
    /boot/control/, adjust the drive letter, and make a shortcut to it in your
    Autostart menu, for example.

12. If you have GNOME 3, you may have found the shutdown menu situation rather
    less than satisfactory: you have to press and hold the Alt key to make the
    'Suspend' menu item turn into a 'Power Off...' item, which also gives you a
    reboot option.
    Fortunately, there is an excellent set up GNOME extensions, flippantly
    called gnome-frippery, available at
    http://intgat.tigress.co.uk/rmy/extensions/index.html. One of them gives you
    a decent shutdown menu. We will modify this extension to give you an even
    better one, one that lets you choose between rebooting Linux or rebooting to
    Windows. Simply copy ./gnome-shell-extensions/Shutdown_Menu@cteubner/ into
    ~/.local/share/gnome-shell/extensions/, and restart GNOME (a quick way of
    doing that, by the way, is Alt-F2, then enter 'r' at the prompt and hit
    Enter).
    Note: I'm also including the original version of the shutdown menu extension
    as ./gnome-shell-extensions/Shutdown_Menu@rmy.pobox.com/. This should make
    it easier to rebase my changes against the latest version if necessary.

And you're done!
